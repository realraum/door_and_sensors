#!/usr/bin/python3
# -*- coding: utf-8 -*-

import json
import time
import serial
import paho.mqtt.client as mqtt
import traceback
import subprocess
import os.path
######## r3 ZMQ ############

myclientid_ = "smallkiosk"
dht_sensordata_file_ = "/tmp/dht11data.txt"

def sendR3Message(client, topic, datadict, qos=0, retain=False):
    client.publish(topic, json.dumps(datadict), qos, retain)


def decodeR3Payload(payload):
    try:
        return json.loads(payload.decode("utf-8"))
    except Exception as e:
        print("Error decodeR3Payload:" + str(e))
        return {}

# reads data from dht_sensordata_file_
# which is generated by cron every minute
# crontab:
# * * * * * /root/Adafruit_Python_DHT/examples/AdafruitDHT.py 11 30 > /tmp/dht11data.txt.new && mv /tmp/dht11data.txt.new /tmp/dht11data.txt


def getAndPublishDHT11SensorValues(client):
    data = ""
    ts = 0
    try:
        ts = int(os.path.getmtime(dht_sensordata_file_))
        with open(dht_sensordata_file_, "r") as dhtf:
            data = dhtf.read()
    except:
        return

    if data[:0 + 5] == "Temp=":
        temp = float(data[5:5 + 4])
        sendR3Message(client, "realraum/" + myclientid_ + "/temperature",
                      {"Location": "LoTHR", "Value": temp, "Ts": ts}, retain=True)
    if data[12:12 + 9] == "Humidity=":
        humidity = float(data[21:21 + 4])
        sendR3Message(client,
                      "realraum/" + myclientid_ + "/relhumidity",
                      {"Location": "LoTHR",
                       "Percent": humidity,
                       "Ts": ts},
                      retain=True)


# Start zmq connection to publish / forward sensor data
def initMQTT():
    client = mqtt.Client(client_id=myclientid_)
    client.connect("mqtt.realraum.at", 1883, keepalive=31)
    client.on_message = onMQTTMessage
    client.subscribe([(TOPIC_YAMAHA_IR_CMD, 2),
                      (TOPIC_RF433_CMD, 2), (TOPIC_RF433_SETDELAY, 2)])
    return client


if __name__ == '__main__':
    client = None
    last_get_sensor_data_ts = time.time()
    try:
        client = initMQTT()
        while True:
            if time.time() - last_get_sensor_data_ts > query_sensor_intervall_:
                getAndPublishDHT11SensorValues(client)
                last_get_sensor_data_ts = time.time()
            client.loop()

    except Exception as e:
        traceback.print_exc()
    finally:
        if isinstance(client, mqtt.Client):
            # client_stop_loop()
            client.disconnect()
