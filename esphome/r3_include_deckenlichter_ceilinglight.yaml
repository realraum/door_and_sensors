
sensor:
  - platform: wifi_signal
    name: "WiFi Signal ${device_name}"
    update_interval: 60s

globals:
  - id: carbon_copy_topics
    type: std::string[9]
    restore_value: no
    initial_value: '{"","","","","","","","",""}'
  - id: carbon_copy_index
    type: uint8_t
    restore_value: no
    initial_value: '0'

text_sensor:
  - platform: mqtt_subscribe
    name: "mqtt_light"
    id: r3_mqtt_light
    topic: action/${light_name}/light
    on_value:
      - lambda: |-
            json::parse_json(id(r3_mqtt_light).get_state(), [](JsonObject root) {
              uint32_t colorsum = 0;
              auto call = id(lightrgbww).turn_on();
              call.set_brightness(1.0);
              if (root.containsKey("r")) {colorsum+=root["r"].as<uint32_t>(); call.set_red(root["r"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_red()*1000);}
              if (root.containsKey("g")) {colorsum+=root["g"].as<uint32_t>(); call.set_green(root["g"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_green()*1000);}
              if (root.containsKey("b")) {colorsum+=root["b"].as<uint32_t>(); call.set_blue(root["b"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_blue()*1000);}
              if (root.containsKey("ww")) {colorsum+=root["ww"].as<uint32_t>(); call.set_warm_white(root["ww"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_warm_white()*1000);}
              if (root.containsKey("cw")) {colorsum+=root["cw"].as<uint32_t>(); call.set_cold_white(root["cw"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_cold_white()*1000);}
              if (root.containsKey("uv")) {call.set_cold_white(root["uv"].as<double>()/1000.0);}
              if (0 == colorsum) {
                call = id(lightrgbww).turn_off();
              }
              if (root.containsKey("fade")) {
                if (root["fade"].containsKey("duration")) {
                  call.set_transition_length(root["fade"]["duration"].as<unsigned int>());
                }
                // if (root["fade"].containsKey("cc")) {
                //   JsonArray ca = root["fade"]["cc"];
                //   for (uint8_t i=0; i< min((uint8_t)9,(uint8_t)ca.size()); i++) {
                //     id(carbon_copy_topics)[i] = (std::string)ca[i];
                //   }
                //   for (uint8_t i=ca.size(); i< 9; i++) {
                //     id(carbon_copy_topics)[i].clear();
                //   }
                //   carbon_copy_index = 0;
                // }
              };

              call.perform();
            });
  - platform: mqtt_subscribe
    name: "mqtt_all_lights"
    id: r3_mqtt_all_lights
    topic: action/ceilingAll/light
    on_value:
      - lambda: |-
            json::parse_json(id(r3_mqtt_all_lights).get_state(), [](JsonObject root) {
              uint32_t colorsum = 0;
              auto call = id(lightrgbww).turn_on();
              call.set_brightness(1.0);
              if (root.containsKey("r")) {colorsum+=root["r"].as<uint32_t>(); call.set_red(root["r"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_red()*1000);}
              if (root.containsKey("g")) {colorsum+=root["g"].as<uint32_t>(); call.set_green(root["g"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_green()*1000);}
              if (root.containsKey("b")) {colorsum+=root["b"].as<uint32_t>(); call.set_blue(root["b"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_blue()*1000);}
              if (root.containsKey("ww")) {colorsum+=root["ww"].as<uint32_t>(); call.set_warm_white(root["ww"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_warm_white()*1000);}
              if (root.containsKey("cw")) {colorsum+=root["cw"].as<uint32_t>(); call.set_cold_white(root["cw"].as<double>()/1000.0);}
              else {colorsum+=(id(lightrgbww).remote_values.get_cold_white()*1000);}
              if (root.containsKey("uv")) {call.set_cold_white(root["uv"].as<double>()/1000.0);}
              if (0 == colorsum) {
                call = id(lightrgbww).turn_off();
              }
              if (root.containsKey("fade")) {
                if (root["fade"].containsKey("duration")) {
                  call.set_transition_length(root["fade"]["duration"].as<uint32_t>());
                }
                // if (root["fade"].containsKey("cc")) {
                //   JsonArray ca = root["fade"]["cc"];
                //   for (uint8_t i=0; i< min((uint8_t)9,(uint8_t)ca.size()); i++) {
                //     id(carbon_copy_topics)[i] = (std::string)ca[i];
                //   }
                //   for (uint8_t i=ca.size(); i< 9; i++) {
                //     id(carbon_copy_topics)[i].clear();
                //   }
                //   carbon_copy_index = 0;
                // }
              };

              call.perform();
            });

output:
  - platform: esp8266_pwm
    pin: 12
    frequency: 1000 Hz
    id: pwm_b
  - platform: esp8266_pwm
    pin: 13
    frequency: 1000 Hz
    id: pwm_g
  - platform: esp8266_pwm
    pin: 15
    frequency: 1000 Hz
    id: pwm_r
  - platform: esp8266_pwm
    pin: 14
    frequency: 1000 Hz
    id: pwm_w1
  - platform: esp8266_pwm
    pin: 4
    frequency: 1000 Hz
    id: pwm_w2
light:
  - platform: rgbww
    name: "${light_name}"
    id: lightrgbww
    red: pwm_r
    green: pwm_g
    blue: pwm_b
    cold_white: pwm_w1
    warm_white: pwm_w2
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    effects:
      - random:
          name: RandomColour
          transition_length: 8s
          update_interval: 60s
      - pulse:
          name: "SlowPulse"
          transition_length: 4s      # defaults to 1s
          update_interval: 4s
      - flicker:
          name: "Flicker"
          alpha: 95%
          intensity: 1.5%
